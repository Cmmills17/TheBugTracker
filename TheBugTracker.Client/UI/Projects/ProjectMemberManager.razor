@inject ICompanyDTOService CompanyService
@inject ISnackbar Snackbar
@inject IProjectDTOService ProjectService

@if (Project is not null)
{
    <AuthorizeView Roles="@($"{Role.Admin}, {Role.ProjectManager}")">
       
        <div class="vstack gap-3">
            
            <div >

                <MudText Typo="Typo.h6" GutterBottom>Developers</MudText>

                <MudChipSet @bind-SelectedValues="selectedDeveloperIds"
                            SelectionMode="SelectionMode.MultiSelection">

                    @foreach (UserDTO developer in developers)
                    {
                        <UserChip User="developer" />
                    }
                </MudChipSet>
                

            </div>


            <div >
                <MudText Typo="Typo.h6" GutterBottom>Submitters</MudText>
                <MudChipSet @bind-SelectedValues="selectedSubmitterIds"
                            SelectionMode="SelectionMode.MultiSelection">

                    @foreach (UserDTO submitter in submitters)
                    {
                        <UserChip User="submitter" />
                    }
                        
                </MudChipSet>

            </div>


            <div class="text-end">

                <MudButton Variant="Variant.Text"
                            Color="Color.Error"
                            StartIcon="@Icons.Material.Filled.Cancel"
                            OnClick="HandleCancel">
                    Cancel
                </MudButton>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Save"
                           OnClick="HandleSave">
                    Save
                </MudButton>

            </div>

        </div>

    </AuthorizeView>
}



@code {
    [Parameter, EditorRequired]
    public ProjectDTO? Project { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; } = default!;
    private UserInfo? userInfo;

    private IEnumerable<UserDTO> developers = [];
    private IEnumerable<UserDTO> submitters = [];

    private IReadOnlyCollection<string> selectedDeveloperIds = [];
    private IReadOnlyCollection<string> selectedSubmitterIds = [];
    private IEnumerable<string> originalMembersIds = [];

    protected override async Task OnParametersSetAsync()
    {
        userInfo ??= await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        originalMembersIds = Project?.Members.Select(m => m.Id) ?? [];

        try
        {
            // get all available devs/submitters
            developers = await CompanyService.GetUsersInRoleAsync(Role.Developer, userInfo!);
            submitters = await CompanyService.GetUsersInRoleAsync(Role.Submitter, userInfo!);

            // preselect the current users
            selectedDeveloperIds = [..developers.Select(d => d.Id).Where(id => originalMembersIds.Contains(id))];
            selectedSubmitterIds = [.. submitters.Select(s => s.Id).Where(id => originalMembersIds.Contains(id))];

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Snackbar.Add("Failed to load users", Severity.Error);
        }
    }

    private async Task HandleCancel()
    {
        selectedDeveloperIds = [.. developers.Select(d => d.Id).Where(id => originalMembersIds.Contains(id))];
        selectedSubmitterIds = [.. submitters.Select(s => s.Id).Where(id => originalMembersIds.Contains(id))];

        await OnClose.InvokeAsync();
    }

    private async Task HandleSave()
    {
        if(Project is null || userInfo is null)
        {
            return;
        }

        try
        {

            IEnumerable<string> selectedUserIds = [.. selectedDeveloperIds, .. selectedSubmitterIds];


            // new members => selected members NOT in original members
            IEnumerable<string> addedUserIds = selectedUserIds.Except(originalMembersIds);

            foreach (string userId in addedUserIds)
            {
                await ProjectService.AddProjectMemberAsync(Project.Id, userId, userInfo);
            }


            // remove members => original members NOT in selected members
            IEnumerable<string> removeUserIds = originalMembersIds.Except(selectedUserIds);

            foreach(string userId in removeUserIds)
            {
                await ProjectService.RemoveProjectMemberAsync(Project.Id, userId, userInfo);
            }

            // TODO: Update Project.Members
            // TODO: Update originalMemberIds after save


            Snackbar.Add("Project Members Updated", Severity.Success);
            await OnClose.InvokeAsync();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Snackbar.Add("Failed to save changes", Severity.Error);
        }
    }

}