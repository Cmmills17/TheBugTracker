@inject ICompanyDTOService CompanyService
@inject ISnackbar Snackbar

@if (Project is not null)
{
    <AuthorizeView Roles="@($"{Role.Admin}, {Role.ProjectManager}")">
       
        <div class="vstack gap-3">
            
            <div >

                <MudText Typo="Typo.h6" GutterBottom>Developers</MudText>
                @foreach(UserDTO developer in developers)
                {
                    <MudChip T="string">

                        <AvatarContent>

                            <MudAvatar>

                               <MudImage Src="@developer.ImageUrl" />

                            </MudAvatar>

                        </AvatarContent>

                        <ChildContent>

                            @developer.FullName

                        </ChildContent>

                    </MudChip>
                }

            </div>

            <div >
                <MudText Typo="Typo.h6" GutterBottom>Submitters</MudText>
                @foreach (UserDTO submitter in submitters)
                {
                    <MudChip T="string">

                        <AvatarContent>

                            <MudAvatar>

                                <MudImage Src="@submitter.ImageUrl" />

                            </MudAvatar>

                        </AvatarContent>

                        <ChildContent>

                            @submitter.FullName

                        </ChildContent>

                    </MudChip>
                }
            </div>

            <div class="text-end">

                <MudButton Variant="Variant.Text"
                            Color="Color.Error"
                            StartIcon="@Icons.Material.Filled.Cancel">
                    Cancel
                </MudButton>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Save">
                    Save
                </MudButton>

            </div>

        </div>

    </AuthorizeView>
}



@code {
    [Parameter, EditorRequired]
    public ProjectDTO? Project { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; } = default!;
    private UserInfo? userInfo;

    private IEnumerable<UserDTO> developers = [];
    private IEnumerable<UserDTO> submitters = [];

    protected override async Task OnParametersSetAsync()
    {
        userInfo ??= await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        try
        {
            developers = await CompanyService.GetUsersInRoleAsync(Role.Developer, userInfo!);
            submitters = await CompanyService.GetUsersInRoleAsync(Role.Submitter, userInfo!);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Snackbar.Add("Failed to load users", Severity.Error);
        }
    }


}