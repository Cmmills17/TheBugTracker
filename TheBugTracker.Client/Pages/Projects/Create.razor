@page "/projects/create"
@attribute [Authorize(Roles = $"{nameof(Role.Admin)}, {nameof(Role.ProjectManager)}")]
@inject IProjectDTOService ProjectService
@inject ISnackbar Snackbar
@inject NavigationManager Nav

<PageTitle>Create a Project | The Bug Tracker </PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">

    <MudBreadcrumbs Items="breadcrumbs"/> 

    <MudPaper Class="p-3">

        <MudText Typo="Typo.h6" GutterBottom>
            Create a New Project
        </MudText>

        <EditForm Model="project" OnValidSubmit="HandleSubmit" class="vstack gap-3">
            <DataAnnotationsValidator />

            <MudTextField @bind-Value="project.Name"
                          For="() => project.Name"
                          Label="Project Name"
                          Variant="Variant.Outlined"/>

            <MudTextField @bind-Value="project.Description"
                          For="() => project.Description"
                          Label="Description"
                          Variant="Variant.Outlined"
                          Lines="5" 
                          MaxLines="15"
                          AutoGrow />
           

            <div class="hstack gap-3 align-items-start flex-wrap">

                <MudDatePicker @bind-Date="project.StartDateTime"
                               Label="Start Date"
                               Variant="Variant.Outlined"
                               For="() => project.StartDateTime" 
                               ErrorText="Please select a valid Start Date" />

                <MudDatePicker @bind-Date="project.EndDateTime"
                               Label="End Date"
                               Variant="Variant.Outlined" 
                               For="() => project.EndDateTime"
                               ErrorText="Please select a valid End Date"/>

            </div>
            
            <MudField Label="Project Priority" 
                      Variant="Variant.Outlined">

                <MudChipSet @bind-SelectedValue="project.Priority"
                            CheckMark
                            SelectionMode="SelectionMode.SingleSelection">

                    @foreach(ProjectPriority priority in Enum.GetValues<ProjectPriority>())
                    {
                        Color color = priority switch
                        {
                            ProjectPriority.Low => Color.Success,
                            ProjectPriority.Medium => Color.Secondary,
                            ProjectPriority.High => Color.Error,
                            ProjectPriority.Urgent => Color.Dark,
                            _ => Color.Default,

                        };
                        <MudChip Value="priority" 
                                 Text="@priority.GetDisplayName()"
                                 Color="color"/>
                    }

                </MudChipSet>

            </MudField>

            <ValidationMessage For="() => project.Priority"/>

            <div class="d-flex">

                <MudButton Variant="Variant.Text"
                           Href="/projects"
                           StartIcon="@Icons.Material.Filled.ArrowBack">

                    Back to Projects

                </MudButton>

                <MudButton Color="Color.Primary"
                           ButtonType="ButtonType.Submit"
                           StartIcon="@Icons.Material.Filled.Save"
                           Variant="Variant.Filled"
                           Class="ms-auto">
                    Submit

                </MudButton>
            </div>
               



        </EditForm>

    </MudPaper>

</MudContainer>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; } = default!;
    UserInfo? userInfo;

    private ProjectDTO project = new() {Created = DateTimeOffset.UtcNow} ;

    private static readonly List<BreadcrumbItem> breadcrumbs = new()
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Projects", href: "/projects"),
        new BreadcrumbItem("New Project", href: null, disabled: true)
    };

    private async Task HandleSubmit()
    {
        userInfo ??= await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        try
        {
            project = await ProjectService.CreateProjectAsync(project, userInfo!);
            Snackbar.Add($"Project '{project.Name}' was successfully created!", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Snackbar.Add("An error has occured saving your project", Severity.Error);

            return;
        }

        Nav.NavigateTo("/projects");
    }



}
