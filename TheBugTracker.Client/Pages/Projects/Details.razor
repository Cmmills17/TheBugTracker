@page "/projects/{id:int}"
@attribute [Authorize]
@inject IProjectDTOService ProjectService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="h-100">
    <MudBreadcrumbs Items="breadcrumbs" />
   
        @if (loading == true)
        {
            <div class="h-100 d-flex flex-column align-items-center justify-content-center gap-2">
                <MudProgressCircular Indeterminate="true" Color="Color.Primary"/>
                <MudText Typo="Typo.button" Color="Color.Default">
                    Loading project...
                </MudText>
            </div>
        }
        else if (project is null)
        {
            <PageTitle>Not Found | The Bug Tracker</PageTitle>

            <div class="h-100 d-flex align-items-canter justify-content-center text-center flex-column gap-2">

                <MudText Color="Color.Tertiary" 
                          Typo="Typo.button"
                          Style="font-size: 1.2rem">
                    Project not found

                </MudText>

                <MudButton Href="/projects"
                            Variant="Variant.Text"
                            StartIcon="@Icons.Material.Filled.ArrowBack"
                            Size="Size.Small">
                    Back to projects
                </MudButton>

            </div>
        }
        else
        {
            <PageTitle>@project.Name | The Bug Tracker</PageTitle>

            <div class="vstack gap-3">

                <MudPaper Class="p-3">
                   
                    <MudText Typo="Typo.h5" GutterBottom>
                   
                        @project.Name

                    </MudText>

                    <div>

                        <MudChip T="string" Label="true" Color="project.Priority.GetColor()" Variant="Variant.Text">

                            Priority: @project.Priority.GetDisplayName()

                        </MudChip>

                        <MudChip Variant="Variant.Text" T="string" Label="true" Color="@(project.EndDate < DateTimeOffset.UtcNow ? Color.Error : Color.Default)" >

                            @project.StartDateTime?.ToShortDateString() - @project.EndDateTime?.ToShortDateString()

                        </MudChip>

                    </div>
                    @* TODO: display PM *@

                </MudPaper>

                <MudPaper Class="p-3">

                    <MudText Typo="Typo.h6">Description</MudText>

                    <MudText Typo="Typo.body1">
                        @project.Description
                    </MudText>

                </MudPaper>

                <MudPaper Class="p-3">
                    
                    <MudText Typo="Typo.h6">Project Members</MudText>
                    @if (project.Members.Count == 0)
                    {
                        <div class="text-center p-5">

                            <MudText Typo="Typo.button" Color="Color.Tertiary">
                                No Members Assigned
                            </MudText>



                        </div>
                    }
                    else
                    {
                        @* TODO: display project members*@
                        <span> Members go here</span>
                    }

                    
                    <MudButton Size="Size.Small"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Settings">
                        Manage team

                    </MudButton>

                </MudPaper>

                <MudPaper Class="p-3">
                    
                    <MudTabs>

                        <MudTabPanel Text="Open Tickets">

                            <ProjectTicketTable Tickets="project.Tickets.Where(t => !t.Archived && t.Status != TicketStatus.Resolved)" />

                        </MudTabPanel>

                        <MudTabPanel Text="Resolved Tickets">

                            <ProjectTicketTable Tickets="project.Tickets.Where(t => !t.Archived && t.Status == TicketStatus.Resolved)">

                            </ProjectTicketTable>
                        </MudTabPanel>

                        <MudTabPanel Text="Archived Tickets">

                            <ProjectTicketTable Tickets="project.Tickets.Where(t => t.Archived == true)" >

                            </ProjectTicketTable>

                        </MudTabPanel>

                    </MudTabs>

                    <MudButton Size="Size.Small"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.AddCircle">

                               New Ticket
                    </MudButton>

                </MudPaper>

                <div class="d-flex">

                    <MudButton Variant="Variant.Text" 
                               StartIcon="@Icons.Material.Filled.ArrowBack"
                               Href="/projects"
                               Color="Color.Primary">

                        Back to Projects
                    </MudButton>

                    <MudButton Variant="Variant.Text"
                               StartIcon="@Icons.Material.Filled.Edit"
                               Href="@($"projects/{project.Id}/edit")"
                               Color="Color.Primary"
                               Class="ms-auto">

                        Edit
                    </MudButton>

                </div>
            </div>
        }

</MudContainer>


@code {

    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; } = default!;

    private UserInfo? userInfo;
    private ProjectDTO? project;
    private bool loading = true;

    private List<BreadcrumbItem> breadcrumbs = [];


    protected override async Task OnParametersSetAsync()
    {
        loading = true;
        userInfo ??= await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        try
        {
            project = await ProjectService.GetProjectByIdAsync(Id, userInfo!);

            if (project is null)
            {
                breadcrumbs =
                [
                    new BreadcrumbItem("Home", href: "/"),
                    new BreadcrumbItem("Projects", href: "/projects"),
                    new BreadcrumbItem("Not Found", href: null, disabled: true)
                ];
            }
            else
            {
                breadcrumbs =
                [
                    new BreadcrumbItem("Home", href: "/"),
                    new BreadcrumbItem("Projects", href: "/projects"),
                    new BreadcrumbItem(project.Name!, href: null, disabled: true)
                ];
            }
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex);
            Snackbar.Add("An error occured loading your project", Severity.Error );
        }

        loading = false;
    }

}
