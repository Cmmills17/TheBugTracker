@page "/projects/{id:int}"
@attribute [Authorize]
@inject IProjectDTOService ProjectService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="h-100">
    <MudBreadcrumbs Items="breadcrumbs" />
   
        @if (loading == true)
        {
            <div class="h-100 d-flex flex-column align-items-center justify-content-center gap-2">
                <MudProgressCircular Indeterminate="true" Color="Color.Primary"/>
                <MudText Typo="Typo.button" Color="Color.Default">
                    Loading project...
                </MudText>
            </div>
        }
        else if (project is null)
        {
            <PageTitle>Not Found | The Bug Tracker</PageTitle>

            <div class="h-100 d-flex align-items-canter justify-content-center text-center flex-column gap-2">

                <MudText Color="Color.Tertiary" 
                          Typo="Typo.button"
                          Style="font-size: 1.2rem">
                    Project not found

                </MudText>

                <MudButton Href="/projects"
                            Variant="Variant.Text"
                            StartIcon="@Icons.Material.Filled.ArrowBack"
                            Size="Size.Small">
                    Back to projects
                </MudButton>

            </div>
        }
        else
        {
            <PageTitle>@project.Name | The Bug Tracker</PageTitle>

            <div class="vstack gap-3">

                @* project Header *@
                <MudPaper Class="p-3">

                   <div class="d-flex">

                        <MudText Typo="Typo.h5" Class="me-auto" GutterBottom>

                            @project.Name

                        </MudText>

                        @if (project.Archive == true)
                        {
                            <MudChip T="string"
                                     Color="Color.Error"
                                     Size="Size.Small">

                                Archived
                            </MudChip>
                        }
                   </div>


                    <div>

                        <MudChip T="string" Label="true" Color="project.Priority.GetColor()" Variant="Variant.Text">

                            Priority: @project.Priority.GetDisplayName()

                        </MudChip>

                        <MudChip Variant="Variant.Text" T="string" Label="true" Color="@(project.EndDate < DateTimeOffset.UtcNow ? Color.Error : Color.Default)" >

                            @project.StartDateTime?.ToShortDateString() - @project.EndDateTime?.ToShortDateString()

                        </MudChip>

                    </div>
                    @* TODO: display PM *@

                </MudPaper>

                @* description *@
                <MudPaper Class="p-3">

                    <MudText Typo="Typo.h6">Description</MudText>

                    <MudText Typo="Typo.body1">
                        @project.Description
                    </MudText>

                </MudPaper>

                @* project members *@
                <MudPaper Class="p-3">
                    
                    <MudText Typo="Typo.h6">Project Members</MudText>
                                        
                        @if (project.Members.Count == 0)
                        {
                            <div class="text-center p-5">

                                <MudText Typo="Typo.button" Color="Color.Tertiary">
                                    No Members Assigned
                                </MudText>

                            </div>
                        }
                        else
                        {
                            <span> Members go here</span>
                        } 
                   

                    
                    <MudButton Size="Size.Small"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Settings"
                               OnClick="() => projectMemberDialogVisible = true">
                        Manage team

                    </MudButton>

                </MudPaper>

                @* project Tickets *@
                <MudPaper Class="p-3">
                    
                    <MudTabs>

                        <MudTabPanel Text="Open Tickets">
                            @if(project.Archive)
                            {
                                @* 
                                    if the project is archived, "open" tickets are the tickets
                                    which were marked as archived by the project (AKA ArchivedByProject = true)
                                *@
                                <ProjectTicketTable Tickets="project.Tickets.Where(t => t.ArchivedByProject && t.Status != TicketStatus.Resolved)" />
                            }
                            else
                            {
                                <ProjectTicketTable Tickets="project.Tickets.Where(t => !t.Archived && t.Status != TicketStatus.Resolved)" />
                            }

                        </MudTabPanel>

                        <MudTabPanel Text="Resolved Tickets">

                            <ProjectTicketTable Tickets="project.Tickets.Where(t => (project.Archive ? t.ArchivedByProject : !t.Archived) && t.Status == TicketStatus.Resolved)" />

                        </MudTabPanel>

                        <MudTabPanel Text="Archived Tickets">

                            <ProjectTicketTable Tickets="project.Tickets.Where(t => project.Archive ? !t.ArchivedByProject : t.Archived == true)" />

                        </MudTabPanel>

                    </MudTabs>

                    <MudButton Size="Size.Small"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.AddCircle">

                               New Ticket
                    </MudButton>

                </MudPaper>

                @* project controls *@
                <div class="d-flex">

                    <MudButton Variant="Variant.Text" 
                               StartIcon="@Icons.Material.Filled.ArrowBack"
                               Href="/projects"
                               Color="Color.Primary">

                        Back to Projects
                    </MudButton>

                    <MudButton Variant="Variant.Text"
                               StartIcon="@Icons.Material.Filled.Edit"
                               Href="@($"projects/{project.Id}/edit")"
                               Color="Color.Primary"
                               Class="ms-auto">

                        Edit
                    </MudButton>

                    @if(project.Archive)
                    {
                        <MudButton Variant="Variant.Text"
                                   StartIcon="@Icons.Material.Filled.RestoreFromTrash"
                                   Color="Color.Success"
                                   OnClick="ConfirmToggleArchive">
                            Restore
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Text"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   OnClick="ConfirmToggleArchive">
                            Archive
                        </MudButton>
                    }
                    

                </div>

            </div>


            <MudMessageBox @ref="archiveConfirmationBox"
                           Title="@(project.Archive ? "Restore Project" : "Archive Project")"
                           CancelText="Cancel">

                   <MessageContent>
                       Are you sure you want to @(project.Archive ? "restore" : "archive") this project?
                   </MessageContent>

                   <YesButton>
                       @if(project.Archive)
                       {
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Success"
                                       StartIcon="@Icons.Material.Filled.RestoreFromTrash"
                                       Class="ms-2"
                                       OnClick="HandleToggleArchive">
                                Restore
                            </MudButton>
                       }
                       else
                       {
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Class="ms-2"
                                       OnClick="HandleToggleArchive">
                                Archive
                            </MudButton>
                       }
                   </YesButton>
            </MudMessageBox>

            <MudDialog @bind-Visible="projectMemberDialogVisible">

                <TitleContent>
                    <MudText Typo="Typo.h5">
                        Manage Project Team
                    </MudText>

                </TitleContent>
                
                <DialogContent>

                    <ProjectMemberManager Project="project" />

                </DialogContent>

            </MudDialog>

        }

</MudContainer>



@code {

    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; } = default!;

    private UserInfo? userInfo;
    private ProjectDTO? project;
    private bool loading = true;
    private bool projectMemberDialogVisible = false;

    private List<BreadcrumbItem> breadcrumbs = [];

    private MudMessageBox? archiveConfirmationBox;

    protected override async Task OnParametersSetAsync()
    {
        loading = true;
        userInfo ??= await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        try
        {
            project = await ProjectService.GetProjectByIdAsync(Id, userInfo!);

            if (project is null)
            {
                breadcrumbs =
                [
                    new BreadcrumbItem("Home", href: "/"),
                    new BreadcrumbItem("Projects", href: "/projects"),
                    new BreadcrumbItem("Not Found", href: null, disabled: true)
                ];
            }
            else
            {
                breadcrumbs =
                [
                    new BreadcrumbItem("Home", href: "/"),
                    new BreadcrumbItem("Projects", href: "/projects"),
                    new BreadcrumbItem(project.Name!, href: null, disabled: true)
                ];
            }
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex);
            Snackbar.Add("An error occured loading your project", Severity.Error );
        }

        loading = false;
    }

    private async Task ConfirmToggleArchive()
    {
        if (archiveConfirmationBox is not null)
        {
            await archiveConfirmationBox.ShowAsync();
        }
    }

    private async Task HandleToggleArchive()
    {

        if(project is null)
        {
            return;
        }


        try
        {
            if(project.Archive)
            {
                // Restore the project if it is archived
                await ProjectService.RestoreProjectAsync(project.Id, userInfo!);
            }
            else
            {
                // Archive the project
                await ProjectService.ArchiveProjectAsync(project.Id, userInfo!);
            }

            // Refresh the info on the page
            project = await ProjectService.GetProjectByIdAsync(project.Id, userInfo!);
            Snackbar.Add($"The project has successfully been {(project!.Archive ? "archived" : "restored")}", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Snackbar.Add("An error occured attempting to archive/restore this project", Severity.Error);
        }

    }

}
